// This file is automatically generated. Do not modify.
package dev.turtywurty.pepolang.parser;

import dev.turtywurty.pepolang.JavaGenerated;
import dev.turtywurty.pepolang.lexer.Token;

@JavaGenerated
public abstract class Expression {
    public abstract <R> R accept(ExpressionVisitor<R> visitor);

    public static class Assign extends Expression {
        private final Token name;

        private final Expression value;

        public Assign(Token name, Expression value) {
            this.name = name;
            this.value = value;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitAssign(this);
        }

        public Token getName() {
            return this.name;
        }

        public Expression getValue() {
            return this.value;
        }
    }

    public static class Binary extends Expression {
        private final Expression left;

        private final Token operator;

        private final Expression right;

        public Binary(Expression left, Token operator, Expression right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitBinary(this);
        }

        public Expression getLeft() {
            return this.left;
        }

        public Token getOperator() {
            return this.operator;
        }

        public Expression getRight() {
            return this.right;
        }
    }

    public static class Grouping extends Expression {
        private final Expression expression;

        public Grouping(Expression expression) {
            this.expression = expression;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitGrouping(this);
        }

        public Expression getExpression() {
            return this.expression;
        }
    }

    public static class Literal extends Expression {
        private final Object value;

        public Literal(Object value) {
            this.value = value;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitLiteral(this);
        }

        public Object getValue() {
            return this.value;
        }
    }

    public static class Unary extends Expression {
        private final Token operator;

        private final Expression right;

        public Unary(Token operator, Expression right) {
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitUnary(this);
        }

        public Token getOperator() {
            return this.operator;
        }

        public Expression getRight() {
            return this.right;
        }
    }

    public static class Variable extends Expression {
        private final Token name;

        public Variable(Token name) {
            this.name = name;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitVariable(this);
        }

        public Token getName() {
            return this.name;
        }
    }
}
