// This file is automatically generated. Do not modify.
package dev.turtywurty.pepolang.parser;

import dev.turtywurty.pepolang.JavaGenerated;
import dev.turtywurty.pepolang.lexer.Token;
import java.util.List;

@JavaGenerated
public abstract class Expression {
    public abstract <R> R accept(ExpressionVisitor<R> visitor);

    public static class Assign extends Expression {
        private final Token name;

        private final Expression value;

        public Assign(Token name, Expression value) {
            this.name = name;
            this.value = value;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitAssign(this);
        }

        public Token getName() {
            return this.name;
        }

        public Expression getValue() {
            return this.value;
        }
    }

    public static class Binary extends Expression {
        private final Expression left;

        private final Token operator;

        private final Expression right;

        public Binary(Expression left, Token operator, Expression right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitBinary(this);
        }

        public Expression getLeft() {
            return this.left;
        }

        public Token getOperator() {
            return this.operator;
        }

        public Expression getRight() {
            return this.right;
        }
    }

    public static class Call extends Expression {
        private final List<Expression> arguments;

        private final Expression callee;

        private final Token paren;

        public Call(List<Expression> arguments, Expression callee, Token paren) {
            this.arguments = arguments;
            this.callee = callee;
            this.paren = paren;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitCall(this);
        }

        public List<Expression> getArguments() {
            return this.arguments;
        }

        public Expression getCallee() {
            return this.callee;
        }

        public Token getParen() {
            return this.paren;
        }
    }

    public static class Function extends Expression {
        private final Token name;

        public Function(Token name) {
            this.name = name;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitFunction(this);
        }

        public Token getName() {
            return this.name;
        }
    }

    public static class Grouping extends Expression {
        private final Expression expression;

        public Grouping(Expression expression) {
            this.expression = expression;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitGrouping(this);
        }

        public Expression getExpression() {
            return this.expression;
        }
    }

    public static class Literal extends Expression {
        private final Object value;

        public Literal(Object value) {
            this.value = value;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitLiteral(this);
        }

        public Object getValue() {
            return this.value;
        }
    }

    public static class Logical extends Expression {
        private final Expression left;

        private final Token operator;

        private final Expression right;

        public Logical(Expression left, Token operator, Expression right) {
            this.left = left;
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitLogical(this);
        }

        public Expression getLeft() {
            return this.left;
        }

        public Token getOperator() {
            return this.operator;
        }

        public Expression getRight() {
            return this.right;
        }
    }

    public static class Unary extends Expression {
        private final Token operator;

        private final Expression right;

        public Unary(Token operator, Expression right) {
            this.operator = operator;
            this.right = right;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitUnary(this);
        }

        public Token getOperator() {
            return this.operator;
        }

        public Expression getRight() {
            return this.right;
        }
    }

    public static class Variable extends Expression {
        private final Token name;

        public Variable(Token name) {
            this.name = name;
        }

        @Override
        public <R> R accept(ExpressionVisitor<R> visitor) {
            return visitor.visitVariable(this);
        }

        public Token getName() {
            return this.name;
        }
    }
}
